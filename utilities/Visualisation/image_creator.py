import imageio
import numpy as np

from utilities.csv_helper_functions import read_sample_file_to_df
from utilities.df_helper_functions import calculate_average_per_column

MALICOUS_DATA_DIR_H = "../../Data/scaled_histograms/malicious_histograms_scaled.csv"
BENIGN_DATA_DIR_H = "../../Data/scaled_histograms/benign_histograms_scaled.csv"

MALICOUS_DATA_DIR_BE = "../../Data/scaled_entropy_histograms/malicious_entropy_histograms_scaled.csv"
BENIGN_DATA_DIR_BE = "../../Data/scaled_entropy_histograms/benign_entropy_histograms_scaled.csv"

MALICOUS_DATA_DIR_ST = "../../Data/scaled_strings_information/malicious_strings_information_scaled.csv"
BENIGN_DATA_DIR_ST = "../../Data/scaled_strings_information/benign_strings_information_scaled.csv"

MALICOUS_DATA_DIR_SE = "../../Data/scaled_sections_information/malicious_sections_information_scaled.csv"
BENIGN_DATA_DIR_SE = "../../Data/scaled_sections_information/benign_sections_information_scaled.csv"


def create_pixel_image(image_data, image_shape, file_name):
    """
    Generate a gray-scale image of a given shape from the input data
    :param image_data: vector of input pixel values
    :param image_shape: dimensions of the image to be created
    :param file_name: file name under which the image should be saved
    :return: None
    """
    single_histogram = np.asarray(image_data).astype(np.uint8)
    reshaped = np.reshape(single_histogram, image_shape)
    imageio.imwrite(file_name, reshaped)


def get_image_average_data(data_dir):
    """

    :param data_dir:
    :return:
    """
    samples_df = read_sample_file_to_df(data_dir)
    samples_df = samples_df.drop("label", axis=1)
    samples_average = calculate_average_per_column(samples_df)
    numpy_arr = samples_average.to_numpy()

    return numpy_arr


def create_image(image_data_dir, data_type_token, image_name):
    """

    :param image_data_dir:
    :param data_type_token:
    :param image_name:
    :return:
    """
    if data_type_token == "BYTE" or data_type_token == "BYTE-ENTROPY":
        dimensions = (16, 16, 1)
    elif data_type_token == "STRINGS":
        dimensions = (8, 12, 1)
    elif data_type_token == "SECTIONS":
        dimensions = (18, 22, 1)
    else:
        print("Non-existing data type.")
        return

    create_pixel_image(get_image_average_data(image_data_dir), dimensions, image_name)


create_image(BENIGN_DATA_DIR_H, "BYTE", "benignHistogram.png")
create_image(MALICOUS_DATA_DIR_H, "BYTE", "maliciousHistogram.png")

create_image(BENIGN_DATA_DIR_BE, "BYTE-ENTROPY", "benignByteEntropyHistogram.png")
create_image(MALICOUS_DATA_DIR_BE, "BYTE-ENTROPY", "maliciousByteEntropyHistogram.png")

create_image(BENIGN_DATA_DIR_ST, "STRINGS", "benignStringsHistogram.png")
create_image(MALICOUS_DATA_DIR_ST, "STRINGS", "maliciousStringsHistogram.png")

create_image(BENIGN_DATA_DIR_SE, "SECTIONS", "benignSections.png")
create_image(MALICOUS_DATA_DIR_SE, "SECTIONS", "maliciousSections.png")
