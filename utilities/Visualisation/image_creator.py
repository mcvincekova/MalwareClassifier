import imageio
import numpy as np

from utilities.csv_helper_functions import read_sample_file_to_df
from utilities.df_helper_functions import calculate_average_per_column

MALICIOUS_DATA_DIR_H = "../../Data/scaled_histograms/malicious_histograms_scaled.csv"
BENIGN_DATA_DIR_H = "../../Data/scaled_histograms/benign_histograms_scaled.csv"

MALICIOUS_DATA_DIR_BE = "../../Data/scaled_entropy_histograms/malicious_entropy_histograms_scaled.csv"
BENIGN_DATA_DIR_BE = "../../Data/scaled_entropy_histograms/benign_entropy_histograms_scaled.csv"

MALICIOUS_DATA_DIR_ST = "../../Data/scaled_strings_information/malicious_strings_information_scaled.csv"
BENIGN_DATA_DIR_ST = "../../Data/scaled_strings_information/benign_strings_information_scaled.csv"

MALICIOUS_DATA_DIR_SE = "../../Data/scaled_sections_information/malicious_sections_information_scaled.csv"
BENIGN_DATA_DIR_SE = "../../Data/scaled_sections_information/benign_sections_information_scaled.csv"

MALICIOUS_DATA_DIR_ALL = "../../Data/feature_merged_scaled/malicious_features_scaled.csv"
BENIGN_DATA_DIR_ALL = "../../Data/feature_merged_scaled/benign_features_scaled.csv"


def add_image_padding(input_array):
    """
    Add padding (append to the end) of twenty Os to a numpy array
    :param input_array: an array to add padding to
    :return: numpy array containing the padding
    """
    padding = np.array([0] * 20)
    complete_image_array = np.append(input_array, padding)

    return complete_image_array


def create_pixel_image(image_data, image_shape, file_name):
    """
    Generate a gray-scale image of a given shape from the input data
    :param image_data: vector of input pixel values
    :param image_shape: dimensions of the image to be created
    :param file_name: file name under which the image should be saved
    :return: None
    """
    single_image = np.asarray(image_data).astype(np.uint8)

    # Check if the image should be composed of all features
    # If so, add padding to satisfy the image dimensions
    if image_shape == (32, 32, 1):
        single_image = add_image_padding(single_image)

    reshaped = np.reshape(single_image, image_shape)
    imageio.imwrite(file_name, reshaped)


def get_image_average_data(data_dir):
    """
    Calculate the average value across all columns of a given dataset
    :param data_dir: data directory of input to be read into the DataFrame
    :return: numpy array of average values for all columns
    """
    samples_df = read_sample_file_to_df(data_dir)
    samples_df = samples_df.drop("label", axis=1)
    samples_average = calculate_average_per_column(samples_df)
    numpy_arr = samples_average.to_numpy()

    return numpy_arr


def create_image(image_data_dir, data_type_token, image_name):
    """
    Creates an gray-scale image of specific dimensions from a given input data
    :param image_data_dir: data directory of input data to be represented as an image
    :param data_type_token: type of the data to be processed
    :param image_name: name of the resulting image file
    :return: None
    """
    if data_type_token == "BYTE" or data_type_token == "BYTE-ENTROPY":
        dimensions = (16, 16, 1)
    elif data_type_token == "STRINGS":
        dimensions = (8, 12, 1)
    elif data_type_token == "SECTIONS":
        dimensions = (18, 22, 1)
    elif data_type_token == "ALL":
        dimensions = (32, 32, 1)
    else:
        print("Non-existing data type.")
        return

    create_pixel_image(get_image_average_data(image_data_dir), dimensions, image_name)


create_image(BENIGN_DATA_DIR_H, "BYTE", "benignHistogram.png")
create_image(MALICIOUS_DATA_DIR_H, "BYTE", "maliciousHistogram.png")

create_image(BENIGN_DATA_DIR_BE, "BYTE-ENTROPY", "benignByteEntropyHistogram.png")
create_image(MALICIOUS_DATA_DIR_BE, "BYTE-ENTROPY", "maliciousByteEntropyHistogram.png")

create_image(BENIGN_DATA_DIR_ST, "STRINGS", "benignStringsHistogram.png")
create_image(MALICIOUS_DATA_DIR_ST, "STRINGS", "maliciousStringsHistogram.png")

create_image(BENIGN_DATA_DIR_SE, "SECTIONS", "benignSections.png")
create_image(MALICIOUS_DATA_DIR_SE, "SECTIONS", "maliciousSections.png")

create_image(BENIGN_DATA_DIR_ALL, "ALL", "benignFeatures.png")
create_image(MALICIOUS_DATA_DIR_ALL, "ALL", "maliciousFeatures.png")
