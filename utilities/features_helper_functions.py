import numpy as np
import pandas as pd
from sklearn.preprocessing import minmax_scale

from utilities.csv_helper_functions import read_sample_file_to_df


def select_random_sample(benign_histogram_dir, malicious_histogram_dir, benign_num, malicious_num):
    """
    Select a random sample from the given input data (both classes)
    :param malicious_histogram_dir:
    :param benign_histogram_dir:
    :param benign_num:
    :param malicious_num:
    :return: DataFrame containing a combination of malicious and benign samples of a given size
    """
    benign_histograms = read_sample_file_to_df(benign_histogram_dir).sample(n=benign_num)
    malicious_histograms = read_sample_file_to_df(malicious_histogram_dir).sample(n=malicious_num)

    all_histograms_df = pd.concat([benign_histograms, malicious_histograms])

    return all_histograms_df


def scale_input_features(scaling_range_max, features_to_scale, labels):
    """
    Scale input features into a given range
    :param scaling_range_max:
    :param features_to_scale:
    :param labels:
    :return: scaled features
    """

    np_result = []

    for i in range(len(features_to_scale)):
        x = np.asarray(features_to_scale[i])

        x_normalized = minmax_scale(x, feature_range=(0, scaling_range_max))

        x_normalized_int = x_normalized.astype(np.uint8)
        x_normalized_int = np.append(x_normalized_int, labels[i])
        np_result.append(x_normalized_int)

    return np_result


def create_features_and_target(input_data):
    """
    Separate features and labels from given input data
    :param input_data:
    :return: tuple containing target values and labels
    """
    target = input_data["label"]
    features = input_data.drop("label", axis=1)

    return target, features
